name: Build Personal Infrastructure ISO

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  personalize-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      releases: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get repository owner
      id: repo-info
      run: |
        echo "owner=${GITHUB_REPOSITORY_OWNER}" >> $GITHUB_OUTPUT
        echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

    - name: Fetch user's GitHub SSH keys
      id: ssh-keys
      run: |
        echo "Fetching SSH keys for user: ${{ steps.repo-info.outputs.owner }}"
        
        # Fetch SSH keys from GitHub API
        ssh_keys=$(curl -s "https://github.com/${{ steps.repo-info.outputs.owner }}.keys")
        
        if [ -z "$ssh_keys" ] || [ "$ssh_keys" = "Not Found" ]; then
          echo "❌ No SSH keys found for user ${{ steps.repo-info.outputs.owner }}"
          echo "Please add SSH keys to your GitHub account: https://github.com/settings/keys"
          exit 1
        fi
        
        echo "✅ Found SSH keys for ${{ steps.repo-info.outputs.owner }}"
        echo "$ssh_keys" > user_ssh_keys.txt
        
        # Create Nix-formatted key list
        echo 'user_ssh_keys = [' > ssh_keys.nix
        while IFS= read -r key; do
          if [ -n "$key" ]; then
            echo "  \"$key\"" >> ssh_keys.nix
          fi
        done < user_ssh_keys.txt
        echo '];' >> ssh_keys.nix
        
        echo "Generated SSH keys configuration:"
        cat ssh_keys.nix

    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Generate personal infrastructure configuration
      run: |
        # Create personal infrastructure directory
        mkdir -p infrastructure/personal
        
        # Generate personal configuration
        cat > infrastructure/personal/default.nix << 'EOF'
        # Personal infrastructure configuration for ${{ steps.repo-info.outputs.owner }}
        { config, pkgs, lib, ... }:
        
        let
          userName = "${{ steps.repo-info.outputs.owner }}";
          userSshKeys = $(cat ssh_keys.nix | sed 's/user_ssh_keys =//')
        in
        {
          imports = [
            ../modules/base.nix
            ../modules/vpn.nix
            ../modules/dns.nix
            ../modules/storage.nix
          ];
        
          # Personal configuration
          keystone = {
            owner = userName;
            sshKeys = userSshKeys;
            domain = "${userName}.keystone.local";
          };
        
          # Enable personal services
          services.keystone = {
            vpn.enable = true;
            dns.enable = true;
            storage.enable = true;
            monitoring.enable = true;
          };
        }
        EOF

    - name: Generate personal ISO flake
      run: |
        cat > personal-iso.nix << 'EOF'
        {
          description = "Personal Keystone Infrastructure ISO for ${{ steps.repo-info.outputs.owner }}";
        
          inputs = {
            nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
            keystone.url = "path:.";
          };
        
          outputs = { self, nixpkgs, keystone }:
            let
              userSshKeys = $(cat ssh_keys.nix | sed 's/user_ssh_keys =//')
            in
            {
              nixosConfigurations = {
                # Personal ISO installer
                personal-iso = nixpkgs.lib.nixosSystem {
                  system = "x86_64-linux";
                  modules = [
                    "${nixpkgs}/nixos/modules/installer/cd-dvd/installation-cd-minimal.nix"
                    ./modules/iso-installer.nix
                    {
                      _module.args.sshKeys = userSshKeys;
                      isoImage.isoName = "keystone-${{ steps.repo-info.outputs.owner }}.iso";
                      isoImage.volumeID = "KEYSTONE-${{ steps.repo-info.outputs.owner }}";
                    }
                  ];
                };
                
                # Personal server configuration
                server = nixpkgs.lib.nixosSystem {
                  system = "x86_64-linux";
                  modules = [
                    ./infrastructure/personal/default.nix
                    ./infrastructure/deployments/server.nix
                  ];
                };
              };
              
              packages.x86_64-linux = {
                iso = self.nixosConfigurations.personal-iso.config.system.build.isoImage;
                default = self.packages.x86_64-linux.iso;
              };
            };
        }
        EOF

    - name: Build personal ISO
      run: |
        echo "🏗️ Building personal ISO for ${{ steps.repo-info.outputs.owner }}..."
        
        # Build the ISO using the generated flake
        nix build -f personal-iso.nix packages.x86_64-linux.iso --out-link result-iso
        
        # Check if ISO was built successfully
        if [ -f result-iso/iso/keystone-${{ steps.repo-info.outputs.owner }}.iso ]; then
          echo "✅ ISO built successfully!"
          ls -lh result-iso/iso/keystone-${{ steps.repo-info.outputs.owner }}.iso
        else
          echo "❌ ISO build failed!"
          exit 1
        fi

    - name: Generate deployment scripts
      run: |
        # Create deployment script
        cat > deploy-infrastructure.sh << 'EOF'
        #!/usr/bin/env bash
        set -euo pipefail
        
        USERNAME="${{ steps.repo-info.outputs.owner }}"
        ISO_URL="https://github.com/${{ github.repository }}/releases/latest/download/keystone-${USERNAME}.iso"
        
        echo "🚀 Keystone Personal Infrastructure Deployment"
        echo "=============================================="
        echo "User: ${USERNAME}"
        echo "Repository: ${{ github.repository }}"
        echo ""
        
        if [ $# -eq 0 ]; then
          echo "Usage: $0 <target-ip> [deployment-type]"
          echo ""
          echo "deployment-type options:"
          echo "  server     - Full server deployment (default)"
          echo "  router     - Router/gateway only"
          echo "  nas        - NAS/storage only"
          echo ""
          echo "Examples:"
          echo "  $0 192.168.1.100           # Deploy full server"
          echo "  $0 192.168.1.1 router      # Deploy as router"
          echo "  $0 192.168.1.50 nas        # Deploy as NAS"
          exit 1
        fi
        
        TARGET_IP="$1"
        DEPLOYMENT_TYPE="${2:-server}"
        
        echo "🎯 Target: ${TARGET_IP}"
        echo "📦 Deployment: ${DEPLOYMENT_TYPE}"
        echo ""
        
        # Check if nixos-anywhere is available
        if ! command -v nixos-anywhere &> /dev/null; then
          echo "❌ nixos-anywhere not found. Installing..."
          nix profile install nixpkgs#nixos-anywhere
        fi
        
        echo "🔄 Deploying infrastructure..."
        nixos-anywhere \
          --flake "github:${{ github.repository }}#${DEPLOYMENT_TYPE}" \
          "root@${TARGET_IP}"
        
        echo ""
        echo "🎉 Deployment complete!"
        echo "Your personal infrastructure is now running at ${TARGET_IP}"
        EOF
        
        chmod +x deploy-infrastructure.sh
        
        # Create quick start README
        cat > PERSONAL-README.md << 'EOF'
        # ${{ steps.repo-info.outputs.owner }}'s Personal Infrastructure
        
        🎉 **Congratulations!** Your personal Keystone infrastructure is ready to deploy.
        
        ## Quick Start
        
        ### 1. Download Your Personal ISO
        ```bash
        curl -L "${{ github.server_url }}/${{ github.repository }}/releases/latest/download/keystone-${{ steps.repo-info.outputs.owner }}.iso" -o keystone-${{ steps.repo-info.outputs.owner }}.iso
        ```
        
        ### 2. Write to USB Drive
        ```bash
        sudo dd if=keystone-${{ steps.repo-info.outputs.owner }}.iso of=/dev/sdX bs=4M status=progress
        ```
        ⚠️ Replace `/dev/sdX` with your USB device path!
        
        ### 3. Boot Target Machine
        - Boot your target machine from the USB drive
        - The machine will automatically get an IP address via DHCP
        - SSH will be enabled with your GitHub SSH keys
        
        ### 4. Deploy Infrastructure
        ```bash
        # Download deployment script
        curl -L "${{ github.server_url }}/${{ github.repository }}/raw/main/deploy-infrastructure.sh" -o deploy-infrastructure.sh
        chmod +x deploy-infrastructure.sh
        
        # Deploy to your target machine
        ./deploy-infrastructure.sh <target-ip>
        ```
        
        ## What You Get
        
        Your personal infrastructure includes:
        - 🔒 **WireGuard VPN** with your SSH keys
        - 🛡️ **DNS Server** (AdGuard Home) for ad/tracker blocking  
        - 📁 **File Storage** with automatic backups
        - 📊 **Monitoring** (Grafana + Prometheus)
        - 🔐 **Secret Management** with automatic encryption
        
        ## Advanced Usage
        
        ### Deploy Different Configurations
        ```bash
        ./deploy-infrastructure.sh 192.168.1.100 server  # Full server
        ./deploy-infrastructure.sh 192.168.1.1 router    # Router only
        ./deploy-infrastructure.sh 192.168.1.50 nas      # NAS only
        ```
        
        ### Customize Configuration
        Edit `infrastructure/personal/default.nix` and push changes to automatically rebuild.
        
        ## Support
        
        - 📖 [Documentation](https://github.com/ncrmro/keystone)
        - 🐛 [Report Issues](https://github.com/ncrmro/keystone/issues)
        - 💬 [Discussions](https://github.com/ncrmro/keystone/discussions)
        
        ---
        
        Generated automatically for **${{ steps.repo-info.outputs.owner }}** from [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
        EOF

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "personal-v${{ github.run_number }}"
        name: "Personal Infrastructure ISO v${{ github.run_number }}"
        body: |
          🚀 **Personal Keystone Infrastructure ISO for ${{ steps.repo-info.outputs.owner }}**
          
          This release contains your personalized infrastructure ISO with your GitHub SSH keys automatically configured.
          
          ## Quick Deploy
          
          1. **Download ISO**: `keystone-${{ steps.repo-info.outputs.owner }}.iso`
          2. **Write to USB**: `sudo dd if=keystone-${{ steps.repo-info.outputs.owner }}.iso of=/dev/sdX bs=4M status=progress`
          3. **Boot target machine** from USB
          4. **Deploy**: `nixos-anywhere --flake github:${{ github.repository }}#server root@<target-ip>`
          
          ## What's Included
          - WireGuard VPN with your SSH keys
          - DNS server (AdGuard Home)
          - File storage and backups
          - Monitoring stack
          - Secret management
          
          **SSH Keys**: ${{ steps.repo-info.outputs.owner }}'s GitHub SSH keys are automatically configured.
          
          See `PERSONAL-README.md` for complete instructions.
        files: |
          result-iso/iso/keystone-${{ steps.repo-info.outputs.owner }}.iso
          deploy-infrastructure.sh
          PERSONAL-README.md
        draft: false
        prerelease: false

    - name: Update repository README
      run: |
        # Update main README with personal information
        if [ "${{ github.repository_owner }}" != "ncrmro" ]; then
          cat > README.md << 'EOF'
        # ${{ steps.repo-info.outputs.owner }}'s Personal Infrastructure
        
        🎯 **This is your personal fork of [Keystone](https://github.com/ncrmro/keystone) - ready for immediate deployment!**
        
        ## 🚀 Quick Start (3 steps)
        
        ### 1. Download Your Personal ISO
        Your infrastructure ISO is automatically built with your GitHub SSH keys:
        
        **[📥 Download Latest ISO](../../releases/latest/download/keystone-${{ steps.repo-info.outputs.owner }}.iso)**
        
        ### 2. Create Bootable USB
        ```bash
        # Write to USB drive (replace /dev/sdX with your USB device)
        sudo dd if=keystone-${{ steps.repo-info.outputs.owner }}.iso of=/dev/sdX bs=4M status=progress
        ```
        
        ### 3. Deploy Infrastructure
        ```bash
        # Boot target machine from USB, then deploy from your laptop:
        curl -L "../../raw/main/deploy-infrastructure.sh" | bash -s -- <target-ip>
        ```
        
        ## 🏗️ What You Get
        
        - 🔒 **WireGuard VPN** - Secure access to your infrastructure
        - 🛡️ **DNS Server** - AdGuard Home for ad/tracker blocking
        - 📁 **File Storage** - Encrypted storage with automatic backups
        - 📊 **Monitoring** - Grafana dashboards for system health
        - 🔐 **Secret Management** - Automatic encryption with your SSH keys
        
        ## 🔧 Advanced Usage
        
        ### Different Deployment Types
        ```bash
        ./deploy-infrastructure.sh 192.168.1.100 server  # Full server (default)
        ./deploy-infrastructure.sh 192.168.1.1 router    # Router/gateway only  
        ./deploy-infrastructure.sh 192.168.1.50 nas      # NAS/storage only
        ```
        
        ### Customize Your Infrastructure
        1. Edit files in `infrastructure/personal/`
        2. Push changes to trigger automatic rebuild
        3. New ISO will be available in [Releases](../../releases)
        
        ## 📚 Learn More
        
        - **[Original Keystone Project](https://github.com/ncrmro/keystone)**
        - **[NixOS Documentation](https://nixos.org/manual/nixos/stable/)**
        - **[nixos-anywhere Guide](https://github.com/numtide/nixos-anywhere)**
        
        ---
        
        ⚡ **Auto-generated infrastructure for ${{ steps.repo-info.outputs.owner }}** | Last built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
        
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README for personal infrastructure" || echo "No changes to commit"
          git push || echo "Nothing to push"
        fi

    - name: Success notification
      run: |
        echo ""
        echo "🎉 SUCCESS! Personal infrastructure ISO built for ${{ steps.repo-info.outputs.owner }}"
        echo ""
        echo "🔗 Download your ISO: ${{ github.server_url }}/${{ github.repository }}/releases/latest"
        echo "📖 Instructions: See PERSONAL-README.md in the release"
        echo ""
        echo "⚡ Next steps:"
        echo "  1. Download the ISO from releases"
        echo "  2. Write to USB drive"
        echo "  3. Boot target machine and deploy!"