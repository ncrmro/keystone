#!/usr/bin/env python3
"""
Keystone Deployment Test Script

Automates the complete VM deployment testing workflow:
- VM lifecycle management (start, stop, hard reset)
- ISO building (optional)
- nixos-anywhere deployment
- Post-deployment verification

Zero external dependencies - uses only Python standard library.

Usage:
    ./bin/test-deployment                    # Normal test run
    ./bin/test-deployment --rebuild-iso      # Rebuild ISO first
    ./bin/test-deployment --hard-reset       # Force kill VM and clean artifacts
    ./bin/test-deployment --rebuild-iso --hard-reset  # Full clean test
"""

import subprocess
import sys
import time
import os
import signal
from pathlib import Path

# ANSI color codes
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
BLUE = '\033[0;34m'
CYAN = '\033[0;36m'
NC = '\033[0m'  # No Color

def print_step(step_num, total_steps, message):
    """Print a formatted step message"""
    print(f"\n{BLUE}[{step_num}/{total_steps}]{NC} {message}")

def print_success(message):
    """Print a success message"""
    print(f"{GREEN}✓{NC} {message}")

def print_error(message):
    """Print an error message"""
    print(f"{RED}✗{NC} {message}")

def print_warning(message):
    """Print a warning message"""
    print(f"{YELLOW}⚠{NC} {message}")

def print_info(message):
    """Print an info message"""
    print(f"{CYAN}ℹ{NC} {message}")

def run_command(cmd, check=True, capture=False, timeout=None):
    """Run a shell command"""
    try:
        if capture:
            result = subprocess.run(
                cmd,
                shell=True,
                check=check,
                capture_output=True,
                text=True,
                timeout=timeout
            )
            return result.stdout.strip()
        else:
            result = subprocess.run(cmd, shell=True, check=check, timeout=timeout)
            return result.returncode == 0
    except subprocess.CalledProcessError as e:
        if check:
            raise
        return False
    except subprocess.TimeoutExpired:
        print_error(f"Command timed out after {timeout} seconds")
        return False

def find_vm_processes():
    """Find running quickemu VM processes"""
    try:
        output = run_command("pgrep -f 'quickemu.*server'", check=False, capture=True)
        if output:
            return [int(pid) for pid in output.split('\n') if pid.strip()]
        return []
    except:
        return []

def kill_vm_processes(hard=False):
    """Kill VM processes"""
    pids = find_vm_processes()
    if not pids:
        print_info("No VM processes found")
        return True

    signal_type = signal.SIGKILL if hard else signal.SIGTERM
    signal_name = "SIGKILL" if hard else "SIGTERM"

    for pid in pids:
        try:
            print_info(f"Sending {signal_name} to process {pid}")
            os.kill(pid, signal_type)
            time.sleep(0.5)
        except ProcessLookupError:
            pass  # Already dead
        except PermissionError:
            print_error(f"Permission denied to kill process {pid}")
            return False

    # Wait for processes to die
    for i in range(10):
        remaining = find_vm_processes()
        if not remaining:
            print_success("All VM processes terminated")
            # Extra cooldown to ensure disk is released
            print_info("Waiting for disk to be fully released...")
            time.sleep(3)
            return True
        time.sleep(0.5)

    print_error("Some VM processes still running")
    return False

def clean_vm_artifacts():
    """Remove VM disk and runtime files"""
    # Sync filesystems to ensure all writes are flushed
    run_command("sync", check=False)
    time.sleep(1)

    vm_dir = Path("vms/server")
    if not vm_dir.exists():
        print_info("VM directory doesn't exist, nothing to clean")
        return True

    artifacts = [
        "disk.qcow2",
        "OVMF_VARS.fd",
        "*.pid",
        "*.socket",
        "*.log",
        "*.ports"
    ]

    removed = []
    for pattern in artifacts:
        for file in vm_dir.glob(pattern):
            try:
                file.unlink()
                removed.append(file.name)
            except Exception as e:
                print_warning(f"Could not remove {file}: {e}")

    if removed:
        print_success(f"Removed {len(removed)} artifact(s): {', '.join(removed)}")
    else:
        print_info("No artifacts to clean")

    return True

def rebuild_iso():
    """Rebuild the Keystone ISO with SSH keys"""
    print_info("Building ISO with SSH key injection...")
    print_info("This may take 2-5 minutes...")

    ssh_key_file = Path.home() / ".ssh" / "id_ed25519.pub"
    if not ssh_key_file.exists():
        print_error(f"SSH key not found: {ssh_key_file}")
        return False

    cmd = f"./bin/build-iso --ssh-key {ssh_key_file}"
    success = run_command(cmd, timeout=300)

    if success:
        print_success("ISO built successfully")
        return True
    else:
        print_error("ISO build failed")
        return False

def start_vm():
    """Start the VM"""
    print_info("Starting VM from ISO...")

    # Start VM in background
    subprocess.Popen(
        "make vm-server",
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL
    )

    print_info("Waiting for VM to boot (30 seconds)...")
    time.sleep(30)

    return True

def wait_for_ssh(max_attempts=10, delay=3):
    """Wait for SSH to become available"""
    print_info(f"Waiting for SSH access (max {max_attempts * delay} seconds)...")

    for attempt in range(max_attempts):
        try:
            result = run_command(
                "ssh -p 22220 -o ConnectTimeout=3 -o StrictHostKeyChecking=no root@localhost 'echo ready' 2>/dev/null",
                check=False,
                capture=True,
                timeout=5
            )
            if result == "ready":
                print_success("SSH is ready")
                return True
        except:
            pass

        if attempt < max_attempts - 1:
            print(f"  Attempt {attempt + 1}/{max_attempts}...", end='\r')
            time.sleep(delay)

    print_error("SSH never became available")
    return False

def deploy_to_vm():
    """Deploy using nixos-anywhere"""
    print_info("Starting nixos-anywhere deployment...")
    print_info("This will take 5-10 minutes...")
    print_warning("You may need to interact with the deployment (confirmations, etc.)")

    cmd = "nix run nixpkgs#nixos-anywhere -- --flake .#test-server root@localhost --ssh-port 22220"
    success = run_command(cmd, timeout=600)

    if success:
        print_success("Deployment completed!")
        return True
    else:
        print_error("Deployment failed")
        return False

def verify_deployment():
    """Run the verification script"""
    print_info("Waiting for deployed system to boot (60 seconds)...")
    time.sleep(60)

    print_info("Running verification checks...")

    # The verification script expects standard SSH port, so we'll do manual checks
    checks = [
        ("SSH connectivity", "ssh -p 22220 -o ConnectTimeout=5 -o StrictHostKeyChecking=no root@localhost 'echo ok' 2>/dev/null"),
        ("Hostname", "ssh -p 22220 -o StrictHostKeyChecking=no root@localhost 'hostname' 2>/dev/null"),
        ("ZFS pool", "ssh -p 22220 -o StrictHostKeyChecking=no root@localhost 'zpool status rpool' 2>/dev/null | grep -q ONLINE"),
        ("SSH service", "ssh -p 22220 -o StrictHostKeyChecking=no root@localhost 'systemctl is-active sshd' 2>/dev/null"),
    ]

    passed = 0
    failed = 0

    for check_name, check_cmd in checks:
        result = run_command(check_cmd, check=False)
        if result:
            print_success(f"{check_name}")
            passed += 1
        else:
            print_error(f"{check_name}")
            failed += 1

    print(f"\nPassed: {GREEN}{passed}{NC}, Failed: {RED}{failed}{NC}")

    return failed == 0

def main():
    """Main test workflow"""
    # Parse arguments
    rebuild_iso_flag = "--rebuild-iso" in sys.argv
    hard_reset_flag = "--hard-reset" in sys.argv
    help_flag = "--help" in sys.argv or "-h" in sys.argv

    if help_flag:
        print(__doc__)
        return 0

    print("=" * 60)
    print(f"{CYAN}Keystone Deployment Test{NC}")
    print("=" * 60)
    print(f"Rebuild ISO: {rebuild_iso_flag}")
    print(f"Hard Reset: {hard_reset_flag}")
    print()

    total_steps = 5
    if rebuild_iso_flag:
        total_steps += 1
    if hard_reset_flag:
        total_steps += 2

    current_step = 0

    # Step: Hard reset if requested
    if hard_reset_flag:
        current_step += 1
        print_step(current_step, total_steps, "Hard resetting VM")

        if not kill_vm_processes(hard=True):
            print_error("Failed to kill VM processes")
            return 1

        current_step += 1
        print_step(current_step, total_steps, "Cleaning VM artifacts")

        if not clean_vm_artifacts():
            print_error("Failed to clean VM artifacts")
            return 1
    else:
        # Graceful stop
        current_step += 1
        print_step(current_step, total_steps, "Stopping existing VM")

        if not kill_vm_processes(hard=False):
            print_warning("Failed graceful stop, trying hard kill...")
            kill_vm_processes(hard=True)

    # Step: Rebuild ISO if requested
    if rebuild_iso_flag:
        current_step += 1
        print_step(current_step, total_steps, "Rebuilding ISO")

        if not rebuild_iso():
            return 1

    # Step: Start VM
    current_step += 1
    print_step(current_step, total_steps, "Starting VM from ISO")

    if not start_vm():
        return 1

    # Step: Wait for SSH
    current_step += 1
    print_step(current_step, total_steps, "Waiting for SSH access")

    if not wait_for_ssh():
        print_error("VM did not become accessible")
        return 1

    # Step: Deploy
    current_step += 1
    print_step(current_step, total_steps, "Deploying with nixos-anywhere")

    if not deploy_to_vm():
        print_error("Deployment failed - check output above")
        return 1

    # Step: Verify
    current_step += 1
    print_step(current_step, total_steps, "Verifying deployment")

    if not verify_deployment():
        print_warning("Some verification checks failed")
        print_info("You can still SSH to the VM: ssh -p 22220 root@localhost")
    else:
        print()
        print("=" * 60)
        print(f"{GREEN}✓ All tests passed!{NC}")
        print("=" * 60)
        print()
        print("SSH to deployed server:")
        print(f"  ssh -p 22220 root@localhost")
        print()

    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print()
        print_warning("Test interrupted by user")
        sys.exit(130)
    except Exception as e:
        print_error(f"Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
