#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
SSH_KEYS_INPUT=""
OUTPUT_DIR="result"
SHOW_HELP=false

# Help function
show_help() {
    cat << EOF
Keystone ISO Builder

Usage: $0 [OPTIONS]

OPTIONS:
    -k, --ssh-key INPUT     SSH public key as file path or key string directly
    -o, --output DIR        Output directory (default: result)
    -h, --help              Show this help message

EXAMPLES:
    # Build ISO without SSH keys
    $0

    # Build ISO with SSH key from file
    $0 --ssh-key ~/.ssh/id_ed25519.pub
    $0 --ssh-key /home/user/.ssh/authorized_keys

    # Build ISO with SSH key string directly
    $0 --ssh-key "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG... user@host"

    # Build with custom output directory
    $0 --ssh-key ~/.ssh/id_ed25519.pub --output my-iso

SSH KEY INPUT:
    Can be either:
    - File path (starts with /, ~, or .): File containing SSH public keys (one per line)
    - Key string: SSH public key string directly
    
    Examples:
    - ~/.ssh/id_ed25519.pub                              (file path)
    - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG... user@host  (key string)

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -k|--ssh-key)
            SSH_KEYS_INPUT="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -h|--help)
            SHOW_HELP=true
            shift
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            show_help
            exit 1
            ;;
    esac
done

if [[ "$SHOW_HELP" == "true" ]]; then
    show_help
    exit 0
fi

# Process SSH keys input if provided
SSH_KEYS_FILE=""
if [[ -n "$SSH_KEYS_INPUT" ]]; then
    # Check if input looks like a file path (starts with /, ~, or .)
    if [[ "$SSH_KEYS_INPUT" =~ ^[/~.] ]]; then
        # Treat as file path
        SSH_KEYS_FILE="$SSH_KEYS_INPUT"
        
        if [[ ! -f "$SSH_KEYS_FILE" ]]; then
            echo -e "${RED}Error: SSH keys file '$SSH_KEYS_FILE' not found${NC}" >&2
            exit 1
        fi
        
        # Check if file has valid SSH keys
        if ! grep -q "^ssh-" "$SSH_KEYS_FILE"; then
            echo -e "${YELLOW}Warning: No SSH keys found in '$SSH_KEYS_FILE'${NC}" >&2
            echo -e "${YELLOW}Expected format: one SSH public key per line${NC}" >&2
        fi
    else
        # Treat as direct SSH key string
        if [[ ! "$SSH_KEYS_INPUT" =~ ^ssh- ]]; then
            echo -e "${RED}Error: SSH key string must start with 'ssh-'${NC}" >&2
            echo -e "${YELLOW}Example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG... user@host${NC}" >&2
            exit 1
        fi
        
        # Create temporary file with the SSH key
        SSH_KEYS_FILE=$(mktemp)
        echo "$SSH_KEYS_INPUT" > "$SSH_KEYS_FILE"
        
        # Clean up temp file on exit
        trap "rm -f $SSH_KEYS_FILE" EXIT
    fi
fi

echo -e "${BLUE}🔨 Building Keystone ISO...${NC}"

# Create temporary flake if SSH keys are provided
if [[ -n "$SSH_KEYS_FILE" ]]; then
    echo -e "${BLUE}📋 Using SSH keys from: $SSH_KEYS_FILE${NC}"
    
    # Store original working directory
    ORIG_DIR=$(pwd)
    
    # Create temporary directory
    TEMP_DIR=$(mktemp -d)
    trap "rm -rf $TEMP_DIR" EXIT
    
    # Read SSH keys into array format for Nix
    echo -e "${BLUE}🔑 Processing SSH keys...${NC}"
    SSH_KEYS_ARRAY="["
    while IFS= read -r line; do
        # Skip empty lines and comments
        if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
            # Escape quotes and add to array
            ESCAPED_KEY=$(echo "$line" | sed 's/"/\\"/g')
            SSH_KEYS_ARRAY="$SSH_KEYS_ARRAY\"$ESCAPED_KEY\" "
        fi
    done < "$SSH_KEYS_FILE"
    SSH_KEYS_ARRAY="$SSH_KEYS_ARRAY]"
    
    # Create temporary flake
    cat > "$TEMP_DIR/flake.nix" << EOF
{
  description = "Keystone ISO with custom SSH keys";
  
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05";
  };
  
  outputs = { self, nixpkgs }: {
    nixosConfigurations = {
      keystoneIso = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          "\${nixpkgs}/nixos/modules/installer/cd-dvd/installation-cd-minimal.nix"
          $(pwd)/modules/iso-installer.nix
          {
            _module.args.sshKeys = $SSH_KEYS_ARRAY;
          }
        ];
      };
    };
    
    packages.x86_64-linux.default = 
      self.nixosConfigurations.keystoneIso.config.system.build.isoImage;
  };
}
EOF
    
    echo -e "${BLUE}🚀 Building ISO with SSH keys...${NC}"
    cd "$TEMP_DIR"
    nix build --impure --out-link "$ORIG_DIR/$OUTPUT_DIR"
    cd - > /dev/null
    
else
    echo -e "${BLUE}🚀 Building ISO without SSH keys...${NC}"
    nix build ".#iso" --out-link "$OUTPUT_DIR"
fi

# Check if build was successful
if [[ -L "$OUTPUT_DIR" && -d "$OUTPUT_DIR" ]]; then
    # Look for any ISO file in the result directory tree
    # Using ls instead of find due to Nix store filesystem quirks
    ISO_PATH=$(ls "$OUTPUT_DIR"/iso/*.iso 2>/dev/null | head -1)
    if [[ -n "$ISO_PATH" && -f "$ISO_PATH" ]]; then
        ISO_SIZE=$(du -h "$ISO_PATH" | cut -f1)
        ISO_NAME=$(basename "$ISO_PATH")
        echo -e "${GREEN}✅ ISO built successfully!${NC}"
        echo -e "${GREEN}📁 Location: $ISO_PATH${NC}"
        echo -e "${GREEN}📄 Filename: $ISO_NAME${NC}"
        echo -e "${GREEN}📦 Size: $ISO_SIZE${NC}"

        # Link ISO to vms directory for VM testing
        VM_ISO_PATH="vms/keystone-installer.iso"
        if [[ -e "$VM_ISO_PATH" ]]; then
            rm -f "$VM_ISO_PATH"
        fi
        ln -sf "../$ISO_PATH" "$VM_ISO_PATH"
        echo -e "${GREEN}🔗 Linked to: $VM_ISO_PATH${NC}"

        echo ""
        echo -e "${BLUE}🔥 To write to USB:${NC}"
        echo -e "${BLUE}   sudo dd if=\"$ISO_PATH\" of=/dev/sdX bs=4M status=progress${NC}"
        echo -e "${YELLOW}   (Replace /dev/sdX with your USB device)${NC}"
    else
        echo -e "${RED}❌ Build completed but ISO file not found${NC}" >&2
        echo -e "${YELLOW}Contents of $OUTPUT_DIR:${NC}" >&2
        find "$OUTPUT_DIR" -type f >&2
        exit 1
    fi
else
    echo -e "${RED}❌ Build failed - $OUTPUT_DIR does not exist or is not a symlink${NC}" >&2
    exit 1
fi